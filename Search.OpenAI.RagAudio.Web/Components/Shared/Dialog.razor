@if (_isShown)
{
    <div class="fixed left-0 top-0 flex h-full w-full items-center justify-center bg-black bg-opacity-50 py-10">
        <div class="max-h-full w-full max-w-xl overflow-y-auto sm:rounded-2xl bg-white dark:bg-gray-800">
            <div class="w-full">
                <div class="m-8 my-20 max-w-[400px] mx-auto">
                    <div class="mb-8">
                        <h1 class="mb-4 text-3xl font-extrabold">@_options?.Title</h1>
                        <p class="py-4 text-gray-600 dark:text-white">@_options?.Message</p>
                        @Content
                    </div>
                    <div class="space-y-4">
                        <button class="p-3 bg-purple-500 hover:bg-purple-600 rounded-md text-sm text-current font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 w-full font-semibold"
                            @onclick="@(async args => await CloseDialog(DialogButtonChoice.Primary))">
                            <span class="text-current">
                                @_options?.PrimaryButtonText
                            </span>
                        </button>
                        <button class="p-3 bg-gray-200 hover:bg-gray-100 dark:bg-black dark:hover:bg-black-600 rounded-md text-primary-foreground text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 w-full font-semibold"
                            @onclick="@(async args => await CloseDialog(DialogButtonChoice.Secondary))">
                            <span class="text-current">
                                @_options?.SecondaryButtonText
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _isShown;
    private DialogOptions? _options;

    [Parameter, EditorRequired]
    public required RenderFragment Content { get; set; }

    public Task ShowAsync(DialogOptions options) => InvokeAsync(() =>
    {
        _isShown = true;
        _options = options;

        StateHasChanged();
    });

    private Task CloseDialog(DialogButtonChoice choice) => InvokeAsync(async () =>
    {
        _isShown = false;

        if (_options is not { } options)
        {
            return;
        }

        await options.ButtonClicked.Invoke(choice);

        StateHasChanged();
    });
}

@code {
    public enum DialogButtonChoice
    {
        /// <summary>User clicked the primary button.</summary>
        Primary,
        
        /// <summary>User clicked the secondary button.</summary>
        Secondary,

        /// <summary>User dismissed the dialog.</summary>
        Dismiss
    };

    public record class DialogOptions(
        string Title,
        string Message,
        string PrimaryButtonText,
        string SecondaryButtonText,
        Func<DialogButtonChoice, Task> ButtonClicked
    );
}